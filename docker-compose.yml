version: '3.8'

services:
  # PostgreSQL Database (from Ukraine base)
  database:
    image: postgres:15-alpine
    container_name: counselflow-ultimate-db
    environment:
      POSTGRES_DB: counselflow_ultimate
      POSTGRES_USER: counselflow_user
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./tools/docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U counselflow_user -d counselflow_ultimate"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - counselflow-network

  # Redis Cache (enhanced)
  redis:
    image: redis:7-alpine
    container_name: counselflow-ultimate-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - counselflow-network

  # Main Backend API (NestJS)
  backend:
    build:
      context: .
      dockerfile: ./apps/backend/Dockerfile
    container_name: counselflow-ultimate-backend
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://counselflow_user:${DATABASE_PASSWORD}@database:5432/counselflow_ultimate
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    ports:
      - "3001:3001"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/backend:/app
      - /app/node_modules
      - upload_data:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - counselflow-network

  # AI Engine (FastAPI from VX-Enhanced)
  ai-engine:
    build:
      context: .
      dockerfile: ./apps/ai-engine/Dockerfile
    container_name: counselflow-ultimate-ai
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./apps/ai-engine:/app
      - ai_models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - counselflow-network

  # Frontend Web App (React)
  frontend-web:
    build:
      context: .
      dockerfile: ./apps/frontend/web/Dockerfile
    container_name: counselflow-ultimate-web
    environment:
      - REACT_APP_API_URL=http://localhost:3001/api/v1
      - REACT_APP_WS_URL=ws://localhost:3001
    ports:
      - "5173:5173"
    depends_on:
      - backend
    volumes:
      - ./apps/frontend/web:/app
      - /app/node_modules
    networks:
      - counselflow-network

  # Admin Dashboard (Next.js)
  frontend-admin:
    build:
      context: .
      dockerfile: ./apps/frontend/admin/Dockerfile
    container_name: counselflow-ultimate-admin
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3001/api/v1
      - NEXT_PUBLIC_AI_URL=http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
      - ai-engine
    volumes:
      - ./apps/frontend/admin:/app
      - /app/node_modules
    networks:
      - counselflow-network

  # Prometheus Monitoring (from VX-Enhanced)
  prometheus:
    image: prom/prometheus:latest
    container_name: counselflow-ultimate-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./services/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - counselflow-network

  # Grafana Dashboards (from VX-Enhanced)
  grafana:
    image: grafana/grafana:latest
    container_name: counselflow-ultimate-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./services/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./services/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - counselflow-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: counselflow-ultimate-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./tools/docker/nginx.conf:/etc/nginx/nginx.conf
      - ./tools/docker/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend-web
      - frontend-admin
    networks:
      - counselflow-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  upload_data:
    driver: local
  ai_models:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  counselflow-network:
    driver: bridge