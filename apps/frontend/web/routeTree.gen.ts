/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from '@/app/routes/__root';
import { Route as UserImport } from '@/app/routes/user';
import { Route as SubmenuImport } from '@/app/routes/submenu';
import { Route as RegisterImport } from '@/app/routes/register';
import { Route as ProjectImport } from '@/app/routes/project';
import { Route as LoginImport } from '@/app/routes/login';
import { Route as DashboardImport } from '@/app/routes/dashboard';
import { Route as CreateUserImport } from '@/app/routes/create-user';
import { Route as AccountsImport } from '@/app/routes/accounts';
import { Route as AccountImport } from '@/app/routes/account';
import { Route as IndexImport } from '@/app/routes/index';

// Create/Update Routes

const UserRoute = UserImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => rootRoute,
} as any);

const SubmenuRoute = SubmenuImport.update({
  id: '/submenu',
  path: '/submenu',
  getParentRoute: () => rootRoute,
} as any);

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any);

const ProjectRoute = ProjectImport.update({
  id: '/project',
  path: '/project',
  getParentRoute: () => rootRoute,
} as any);

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any);

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any);

const CreateUserRoute = CreateUserImport.update({
  id: '/create-user',
  path: '/create-user',
  getParentRoute: () => rootRoute,
} as any);

const AccountsRoute = AccountsImport.update({
  id: '/accounts',
  path: '/accounts',
  getParentRoute: () => rootRoute,
} as any);

const AccountRoute = AccountImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/account': {
      id: '/account';
      path: '/account';
      fullPath: '/account';
      preLoaderRoute: typeof AccountImport;
      parentRoute: typeof rootRoute;
    };
    '/accounts': {
      id: '/accounts';
      path: '/accounts';
      fullPath: '/accounts';
      preLoaderRoute: typeof AccountsImport;
      parentRoute: typeof rootRoute;
    };
    '/create-user': {
      id: '/create-user';
      path: '/create-user';
      fullPath: '/create-user';
      preLoaderRoute: typeof CreateUserImport;
      parentRoute: typeof rootRoute;
    };
    '/dashboard': {
      id: '/dashboard';
      path: '/dashboard';
      fullPath: '/dashboard';
      preLoaderRoute: typeof DashboardImport;
      parentRoute: typeof rootRoute;
    };
    '/login': {
      id: '/login';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof LoginImport;
      parentRoute: typeof rootRoute;
    };
    '/project': {
      id: '/project';
      path: '/project';
      fullPath: '/project';
      preLoaderRoute: typeof ProjectImport;
      parentRoute: typeof rootRoute;
    };
    '/register': {
      id: '/register';
      path: '/register';
      fullPath: '/register';
      preLoaderRoute: typeof RegisterImport;
      parentRoute: typeof rootRoute;
    };
    '/submenu': {
      id: '/submenu';
      path: '/submenu';
      fullPath: '/submenu';
      preLoaderRoute: typeof SubmenuImport;
      parentRoute: typeof rootRoute;
    };
    '/user': {
      id: '/user';
      path: '/user';
      fullPath: '/user';
      preLoaderRoute: typeof UserImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/account': typeof AccountRoute;
  '/accounts': typeof AccountsRoute;
  '/create-user': typeof CreateUserRoute;
  '/dashboard': typeof DashboardRoute;
  '/login': typeof LoginRoute;
  '/project': typeof ProjectRoute;
  '/register': typeof RegisterRoute;
  '/submenu': typeof SubmenuRoute;
  '/user': typeof UserRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/account': typeof AccountRoute;
  '/accounts': typeof AccountsRoute;
  '/create-user': typeof CreateUserRoute;
  '/dashboard': typeof DashboardRoute;
  '/login': typeof LoginRoute;
  '/project': typeof ProjectRoute;
  '/register': typeof RegisterRoute;
  '/submenu': typeof SubmenuRoute;
  '/user': typeof UserRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/account': typeof AccountRoute;
  '/accounts': typeof AccountsRoute;
  '/create-user': typeof CreateUserRoute;
  '/dashboard': typeof DashboardRoute;
  '/login': typeof LoginRoute;
  '/project': typeof ProjectRoute;
  '/register': typeof RegisterRoute;
  '/submenu': typeof SubmenuRoute;
  '/user': typeof UserRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/account'
    | '/accounts'
    | '/create-user'
    | '/dashboard'
    | '/login'
    | '/project'
    | '/register'
    | '/submenu'
    | '/user';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/account'
    | '/accounts'
    | '/create-user'
    | '/dashboard'
    | '/login'
    | '/project'
    | '/register'
    | '/submenu'
    | '/user';
  id:
    | '__root__'
    | '/'
    | '/account'
    | '/accounts'
    | '/create-user'
    | '/dashboard'
    | '/login'
    | '/project'
    | '/register'
    | '/submenu'
    | '/user';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AccountRoute: typeof AccountRoute;
  AccountsRoute: typeof AccountsRoute;
  CreateUserRoute: typeof CreateUserRoute;
  DashboardRoute: typeof DashboardRoute;
  LoginRoute: typeof LoginRoute;
  ProjectRoute: typeof ProjectRoute;
  RegisterRoute: typeof RegisterRoute;
  SubmenuRoute: typeof SubmenuRoute;
  UserRoute: typeof UserRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountRoute: AccountRoute,
  AccountsRoute: AccountsRoute,
  CreateUserRoute: CreateUserRoute,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
  ProjectRoute: ProjectRoute,
  RegisterRoute: RegisterRoute,
  SubmenuRoute: SubmenuRoute,
  UserRoute: UserRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/account",
        "/accounts",
        "/create-user",
        "/dashboard",
        "/login",
        "/project",
        "/register",
        "/submenu",
        "/user"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/account": {
      "filePath": "account.tsx"
    },
    "/accounts": {
      "filePath": "accounts.tsx"
    },
    "/create-user": {
      "filePath": "create-user.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/project": {
      "filePath": "project.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/submenu": {
      "filePath": "submenu.tsx"
    },
    "/user": {
      "filePath": "user.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
